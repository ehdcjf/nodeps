// generated by bwasm authored by kiwiyou
const fs = require('fs');
const code = Buffer.from(
	'',
	'base64'
);

let wasm_memory;
const write_stdout = (addr, len) => fs.writeSync(1, new Uint8Array(wasm_memory.buffer, addr, len));
const read_stdin = (addr, len) => fs.readSync(0, new Uint8Array(wasm_memory.buffer, addr, len));
const proc_exit = () => proccess.exit();
const log = (value) => {
	console.log(value);
};
WebAssembly.instantiate(code, {
	wasi_snapshot_preview1: {
		fd_write: (fd, iovs, iovs_len, nwritten) => {
			fd = fd >>> 0;
			iovs = iovs >>> 0;
			iovs_len = iovs_len >>> 0;
			nwritten = nwritten >>> 0;
			console.log(fd); // fd 는 file discptor    0 은 standard input , 1 은 standard output 계속 1 이 나오니까.. 맞는 거 같음.
			// The file descriptor (opened with writing permission) to write to.
			console.log(iovs); //  A wasm pointer to an array of __wasi_ciovec_t structures, each describing a buffer to write data from.
			console.log(iovs_len);
			console.log(nwritten);
			// console.log(wasm_memory.buffer);
			// const x = new Uint8Array(wasm_memory.buffer, iovs, iovs_len);
			// return
			// console.log(wasm_memory.buffer);
			const x = new Uint32Array(wasm_memory.buffer, iovs, iovs_len);
			const [offset, length] = x;
			console.log(offset, length);
			fs.writeSync(fd, new Uint32Array(wasm_memory.buffer), offset, length);
		},
	},
	env: { abort: () => {} },
}).then((wasm) => {
	const { hello, memory } = wasm.instance.exports;
	memory.grow(1000);
	wasm_memory = memory;
	hello();
});
/*
use std::io::Write;

use io::Reader;

pub fn main(stdout: &mut impl Write) {
    let mut reader = Reader::new(1 << 16);
    let mut tokens = reader.tokens().flat_map(str::parse::<u32>);
    let n = tokens.next().unwrap() as usize;
    let mut count = vec![0; 10_001];
    for x in tokens.by_ref().take(n) {
        count[x as usize] += 1;
    }
    for (i, &c) in count.iter().enumerate() {
        for _ in 0..c {
            writeln!(stdout, "{i}").ok();
        }
    }
}
*/
